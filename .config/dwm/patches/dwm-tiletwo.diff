diff '--color=auto' -u dwm/vanitygaps.c dwm-tiletwo/vanitygaps.c
--- dwm/vanitygaps.c	2021-05-10 17:09:08.242348235 +0300
+++ dwm-tiletwo/vanitygaps.c	2021-05-20 00:47:03.778860946 +0300
@@ -20,6 +20,9 @@
 static void nrowgrid(Monitor *m);
 static void spiral(Monitor *m);
 static void tile(Monitor *m);
+
+/* based on centeredmaster */
+static void tiletwo(Monitor *m);
 /* Internals */
 static void getgaps(Monitor *m, int *oh, int *ov, int *ih, int *iv, unsigned int *nc);
 static void getfacts(Monitor *m, int msize, int ssize, float *mf, float *sf, int *mr, int *sr);
@@ -365,6 +368,81 @@
 		}
 	}
 }
+void
+tiletwo(Monitor *m)
+{
+	unsigned int i, n;
+	int oh, ov, ih, iv;
+	int mx = 0, my = 0, mh = 0, mw = 0;
+	int lx = 0, ly = 0;
+	int rx = 0, ry = 0;
+	float mfacts = 0, sfacts = 0;
+	int mtotal = 0, stotal = 0;
+	int mrest = 0, srest = 0;
+  int nbreak = -1;
+  int sw = 0, sh = 0;
+	Client *c;
+
+	getgaps(m, &oh, &ov, &ih, &iv, &n);
+	if (n == 0)
+		return;
+
+	/* initialize areas */
+	mx = m->wx + ov;
+	my = m->wy + oh;
+	mh = m->wh - 2*oh - ih * ((!m->nmaster ? n : MIN(n, m->nmaster)) - 1);
+	mw = m->ww - 2*ov;
+
+	if (m->nmaster && n > m->nmaster) {
+		/* ||<---M--->|<-S->|| */
+		mw = (m->ww - 2*ov - 2*iv) * m->mfact;
+    sw = (m->ww - 2*ov - 2*iv - mw) / 2;
+    sh = m->wh - 2*oh - (n - m->nmaster - 1) / 2 * ih;
+
+		lx = m->wx + ov + mw + iv;
+		ly = m->wy + oh;
+		rx = lx + sw + iv;
+		ry = m->wy + oh;
+	}
+
+	/* calculate facts */
+	for (n = 0, c = nexttiled(m->clients); c; c = nexttiled(c->next), n++) {
+		if (!m->nmaster || n < m->nmaster)
+			mfacts += 1;
+		else if ((n - m->nmaster) % 2 == 0)
+			sfacts += 1; // total factor of left hand stack area
+	}
+
+	for (n = 0, c = nexttiled(m->clients); c; c = nexttiled(c->next), n++)
+		if (!m->nmaster || n < m->nmaster)
+			mtotal += mh / mfacts;
+		else if ((n - m->nmaster) % 2 == 0)
+			stotal += sh / sfacts; // count only for left column
+
+	mrest = mh - mtotal;
+	srest = sh - stotal;
+
+	for (i = 0, c = nexttiled(m->clients); c; c = nexttiled(c->next), i++) {
+		if (!m->nmaster || i < m->nmaster) {
+			/* nmaster clients are stacked vertically, in the center of the screen */
+			resize(c, mx, my, mw - (2*c->bw), (mh / mfacts) + (i < mrest ? 1 : 0) - (2*c->bw), 0);
+			my += HEIGHT(c) + ih;
+		} else {
+			/* side clients are grid */
+      if ((i - m->nmaster) % 2 == 0 && n == i + 1) {
+				resize(c, lx, ly, 2*sw + iv - (2*c->bw), (sh / sfacts) - (2*c->bw), 0);
+      }
+			else if ((i - m->nmaster) % 2 ) {
+				resize(c, rx, ry, sw - (2*c->bw), (sh / sfacts) + ((i - 2*m->nmaster) < 2*srest ? 1 : 0) - (2*c->bw), 0);
+				ry += HEIGHT(c) + ih;
+			} else {
+				resize(c, lx, ly, sw - (2*c->bw), (sh / sfacts) + ((i - 2*m->nmaster) < 2*srest ? 1 : 0) - (2*c->bw), 0);
+				ly += HEIGHT(c) + ih;
+			}
+		}
+	}
+}
+

 void
 centeredfloatingmaster(Monitor *m)
